machine:
  files:
    - content: |
        ${indent(8, k8s_keystone_auth_ca_crt)}
      permissions: 0o444
      path: /var/keystone/k8s-keystone-auth-ca.crt
      op: create
    - content: |
        ${indent(8, k8s_keystone_auth_config)}
      permissions: 0o444
      path: /var/keystone/k8s-keystone-auth-webhook.yaml
      op: create
cluster:
  apiServer:
    extraArgs:
      authentication-token-webhook-config-file: /var/keystone/k8s-keystone-auth-webhook.yaml
    extraVolumes:
      - hostPath: /var/keystone
        mountPath: /var/keystone
        readonly: true
  inlineManifests:
    - name: k8s-keystone-tls-secret
      contents: |-
        apiVersion: v1
        kind: Secret
        metadata:
          namespace: kube-system
          name: k8s-keystone-tls-secret
        type: kubernetes.io/tls
        data:
          tls.crt: ${base64encode(k8s_keystone_auth_crt)}
          tls.key: ${base64encode(k8s_keystone_auth_key)}
    - name: k8s-keystone-daemonset
      contents: |-
        apiVersion: apps/v1
        kind: DaemonSet
        metadata:
          name: k8s-keystone
          namespace: kube-system
          labels:
            app: k8s-keystone
        spec:
          selector:
            matchLabels:
              app: k8s-keystone
          template:
            metadata:
              labels:
                app: k8s-keystone
            spec:
              containers:
                - name: k8s-keystone
                  image: registry.k8s.io/provider-os/k8s-keystone-auth:${os_ccm_version}
                  args:
                    - ./bin/k8s-keystone-auth
                    - --tls-cert-file
                    - /etc/pki/tls.crt
                    - --tls-private-key-file
                    - /etc/pki/tls.key
                    - --keystone-url
                    - ${os_auth_url}/v3
                  volumeMounts:
                    - mountPath: /etc/pki
                      name: tls-secret
                      readOnly: true
                  ports:
                    - containerPort: 8443
              hostNetwork: true
              volumes:
                - name: tls-secret
                  secret:
                    secretName: k8s-keystone-tls-secret
              nodeSelector:
                node-role.kubernetes.io/control-plane: ""
              tolerations:
                - effect: NoSchedule
                  operator: Exists
                - key: CriticalAddonsOnly
                  operator: Exists
                - effect: NoExecute
                  operator: Exists
    - name: k8s-keystone-service
      contents: |-
        apiVersion: v1
        kind: Service
        metadata:
          name: k8s-keystone-service
          namespace: kube-system
        spec:
          selector:
            app: k8s-keystone
          ports:
            - protocol: TCP
              port: 8443
              targetPort: 8443
    - name: k8s-keystone-project-cluster-role-binding
      contents: |-
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: k8s-keystone-project-cluster-role-binding
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: cluster-admin
        subjects:
          - apiGroup: rbac.authorization.k8s.io
            kind: User
            name: ${os_user_name}
