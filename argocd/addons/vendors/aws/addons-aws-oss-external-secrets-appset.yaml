---
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: addons-aws-external-secrets
spec:
  goTemplate: true
  syncPolicy:
    preserveResourcesOnDeletion: true
  generators:
    - merge:
        mergeKeys: [server]
        generators:
          - clusters:
              values:
                addonChart: external-secrets
                # anything not staging or prod use this version
                addonChartVersion: 0.9.13
                addonChartRepository: https://charts.external-secrets.io
              selector:
                matchExpressions:
                  - key: enable_external_secrets
                    operator: In
                    values: ['true']
          - clusters:
              selector:
                matchLabels:
                  environment: staging
              values:
                addonChartVersion: 0.9.13
          - clusters:
              selector:
                matchLabels:
                  environment: production
              values:
                addonChartVersion: 0.9.13
  template:
    metadata:
      name: addon-{{.name}}-{{.values.addonChart}}
    spec:
      project: default
      sources:
        - repoURL: '{{.metadata.annotations.addons_repo_url}}'
          targetRevision: '{{.metadata.annotations.addons_repo_revision}}'
          ref: values
        - chart: '{{.values.addonChart}}'
          repoURL: '{{.values.addonChartRepository}}'
          targetRevision: '{{.values.addonChartVersion}}'
          helm:
            releaseName: '{{.values.addonChart}}'
            ignoreMissingValueFiles: true
            valueFiles:
              - $values/{{.metadata.annotations.vendor_addon_config_path}}/{{.values.addonChart}}/values.yaml
              - $values/{{.metadata.annotations.vendor_addon_config_path}}/{{.values.addonChart}}/{{.metadata.labels.environment}}.yaml
            values: |
              {{- if .metadata.annotations.base_nodepool_labels}}
              nodeSelector:
                {{.metadata.annotations.base_nodepool_labels}}
              {{- end }}
              certController:
              {{- if .metadata.annotations.base_nodepool_labels}}
                nodeSelector:
                  {{.metadata.annotations.base_nodepool_labels}}
              {{- end }}
              webhook:
              {{- if .metadata.annotations.base_nodepool_labels}}
                nodeSelector:
                  {{.metadata.annotations.base_nodepool_labels}}
              {{- end }}
              serviceAccount:
                name: {{.metadata.annotations.external_secrets_service_account}}
                annotations:
                  eks.amazonaws.com/role-arn: {{.metadata.annotations.external_secrets_iam_role_arn}}
      destination:
        namespace: '{{.metadata.annotations.external_secrets_namespace}}'
        name: '{{.name}}'
      syncPolicy:
        automated: {}
        syncOptions: [CreateNamespace=true, ServerSideApply=true]
      ignoreDifferences:
        - group: admissionregistration.k8s.io
          kind: MutatingWebhookConfiguration
          jqPathExpressions: ['.webhooks[].clientConfig.caBundle']
        - group: admissionregistration.k8s.io
          kind: ValidatingWebhookConfiguration
          jqPathExpressions: ['.webhooks[].clientConfig.caBundle']
